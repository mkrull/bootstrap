#!/usr/bin/env bash

# Path to the bash it configuration
export BASH_IT="${HOME}/.bash_it"

# Lock and Load a custom theme file
# location /.bash_it/themes/
export BASH_IT_THEME='mak'

# (Advanced): Change this to the name of your remote repo if you
# cloned bash-it with a remote other than origin such as `bash-it`.
# export BASH_IT_REMOTE='bash-it'

# Your place for hosting Git repos. I use this for private repos.
export GIT_HOSTING='git@git.domain.com'

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# (Advanced): Uncomment this to make Bash-it reload itself automatically
# after enabling or disabling aliases, plugins, and completions.
# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1

# Load Bash It
source "$BASH_IT"/bash_it.sh

export PATH=$PATH:${HOME}/bin

# Language integrations
# Golang
if [ -d "${HOME}/gopath" ]; then
    export GOPATH="${HOME}/gopath"
    export PATH="${HOME}/gopath/bin:$PATH"
fi

# Rakudo Perl6
if [ -f "${HOME}/.rakudobrew/bin/rakudobrew" ]; then
    eval "$(${HOME}/.rakudobrew/bin/rakudobrew init -)"
fi

# Rust
export PATH="${HOME}/.cargo/bin:$PATH"

# Python
if [ -d "${HOME}/.pyenv" ]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

[ -f ${HOME}/.pyenv/versions/3.5.3/bin/virtualenvwrapper.sh ] && \
    source ${HOME}/.pyenv/versions/3.5.3/bin/virtualenvwrapper.sh

# Start emacs server
if ! (ps aux |grep -qe '[e]macs .*spaceserver.*daemon'); then
    emacs --eval '(setq server-name "spaceserver")' --daemon 2>/dev/null
fi

# Aliases
alias defcon='mplayer http://ice1.somafm.com/defcon-256-mp3'
# Start emacsclient in a new frame
function space {
    # Run emacsclient in background and dispatch the job from the current shell
    # Do it in a subshell to supress output of bash job control in the original
    # shell. As we disown anyway there is not much use of it.
    (emacsclient -q -c --socket-name "spaceserver" -a \emacs $* &
     disown)
}
# Start emacsclient in an existing frame
function same-space {
    # Run emacsclient in background and dispatch the job from the current shell
    # Do it in a subshell to supress output of bash job control in the original
    # shell. As we disown anyway there is not much use of it.
    (emacsclient -q --socket-name "spaceserver" -a \emacs $* &
     disown)
}
